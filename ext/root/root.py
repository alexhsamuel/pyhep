# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import rootc
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


getPointerValue = rootc.getPointerValue
class TObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TObject, name)
    __repr__ = _swig_repr
    def IsZombie(*args): return rootc.TObject_IsZombie(*args)
    def ClassName(*args): return rootc.TObject_ClassName(*args)
    def GetName(*args): return rootc.TObject_GetName(*args)
    def GetTitle(*args): return rootc.TObject_GetTitle(*args)
    def InheritsFrom(*args): return rootc.TObject_InheritsFrom(*args)
    def Print(*args): return rootc.TObject_Print(*args)
    def Write(*args): return rootc.TObject_Write(*args)
    def __init__(self, *args): 
        this = rootc.new_TObject(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = rootc.delete_TObject
    __del__ = lambda self : None;
TObject_swigregister = rootc.TObject_swigregister
TObject_swigregister(TObject)

class TNamed(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TNamed, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TNamed, name)
    __repr__ = _swig_repr
    def SetName(*args): return rootc.TNamed_SetName(*args)
    def SetTitle(*args): return rootc.TNamed_SetTitle(*args)
    def __init__(self, *args): 
        this = rootc.new_TNamed(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = rootc.delete_TNamed
    __del__ = lambda self : None;
TNamed_swigregister = rootc.TNamed_swigregister
TNamed_swigregister(TNamed)

class TIterator(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Next(*args): return rootc.TIterator_Next(*args)
    def __iter__(*args): return rootc.TIterator___iter__(*args)
    def next(*args): return rootc.TIterator_next(*args)
TIterator_swigregister = rootc.TIterator_swigregister
TIterator_swigregister(TIterator)

class TClass(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TClass, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TClass, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def InheritsFrom(*args): return rootc.TClass_InheritsFrom(*args)
TClass_swigregister = rootc.TClass_swigregister
TClass_swigregister(TClass)

class TKey(TNamed):
    __swig_setmethods__ = {}
    for _s in [TNamed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TKey, name, value)
    __swig_getmethods__ = {}
    for _s in [TNamed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TKey, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetClassName(*args): return rootc.TKey_GetClassName(*args)
    def GetCycle(*args): return rootc.TKey_GetCycle(*args)
    def IsA(*args): return rootc.TKey_IsA(*args)
TKey_swigregister = rootc.TKey_swigregister
TKey_swigregister(TKey)

class TDirectory(TNamed):
    __swig_setmethods__ = {}
    for _s in [TNamed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TDirectory, name, value)
    __swig_getmethods__ = {}
    for _s in [TNamed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TDirectory, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def cd(*args): return rootc.TDirectory_cd(*args)
    def Delete(*args): return rootc.TDirectory_Delete(*args)
    def Get(*args): return rootc.TDirectory_Get(*args)
    def GetFile(*args): return rootc.TDirectory_GetFile(*args)
    def GetKey(*args): return rootc.TDirectory_GetKey(*args)
    def GetList(*args): return rootc.TDirectory_GetList(*args)
    def GetListOfKeys(*args): return rootc.TDirectory_GetListOfKeys(*args)
    def GetMother(*args): return rootc.TDirectory_GetMother(*args)
    def GetPath(*args): return rootc.TDirectory_GetPath(*args)
    def mkdir(*args): return rootc.TDirectory_mkdir(*args)
    def Purge(*args): return rootc.TDirectory_Purge(*args)
TDirectory_swigregister = rootc.TDirectory_swigregister
TDirectory_swigregister(TDirectory)

class TFile(TDirectory):
    __swig_setmethods__ = {}
    for _s in [TDirectory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TFile, name, value)
    __swig_getmethods__ = {}
    for _s in [TDirectory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TFile(*args)
        try: self.this.append(this)
        except: self.this = this
    def cd(*args): return rootc.TFile_cd(*args)
    def Close(*args): return rootc.TFile_Close(*args)
    def Write(*args): return rootc.TFile_Write(*args)
TFile_swigregister = rootc.TFile_swigregister
TFile_swigregister(TFile)

class TList(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TList, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TList, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSize(*args): return rootc.TList_GetSize(*args)
    def At(*args): return rootc.TList_At(*args)
    def __len__(*args): return rootc.TList___len__(*args)
    def __getitem__(*args): return rootc.TList___getitem__(*args)
TList_swigregister = rootc.TList_swigregister
TList_swigregister(TList)

class TTree(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TTree, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TTree, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetEntry(*args): return rootc.TTree_GetEntry(*args)
    def GetEntries(*args): return rootc.TTree_GetEntries(*args)
    def GetIteratorOnAllLeaves(*args): return rootc.TTree_GetIteratorOnAllLeaves(*args)
    def Print(*args): return rootc.TTree_Print(*args)
TTree_swigregister = rootc.TTree_swigregister
TTree_swigregister(TTree)

class TLeaf(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLeaf, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLeaf, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetAddress(*args): return rootc.TLeaf_SetAddress(*args)
    def SetAddressInt(*args): return rootc.TLeaf_SetAddressInt(*args)
TLeaf_swigregister = rootc.TLeaf_swigregister
TLeaf_swigregister(TLeaf)

class TLeafD(TLeaf):
    __swig_setmethods__ = {}
    for _s in [TLeaf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLeafD, name, value)
    __swig_getmethods__ = {}
    for _s in [TLeaf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLeafD, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
TLeafD_swigregister = rootc.TLeafD_swigregister
TLeafD_swigregister(TLeafD)

class TLeafF(TLeaf):
    __swig_setmethods__ = {}
    for _s in [TLeaf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLeafF, name, value)
    __swig_getmethods__ = {}
    for _s in [TLeaf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLeafF, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
TLeafF_swigregister = rootc.TLeafF_swigregister
TLeafF_swigregister(TLeafF)

class TLeafI(TLeaf):
    __swig_setmethods__ = {}
    for _s in [TLeaf]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TLeafI, name, value)
    __swig_getmethods__ = {}
    for _s in [TLeaf]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TLeafI, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
TLeafI_swigregister = rootc.TLeafI_swigregister
TLeafI_swigregister(TLeafI)

class TH1(TNamed):
    __swig_setmethods__ = {}
    for _s in [TNamed]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH1, name, value)
    __swig_getmethods__ = {}
    for _s in [TNamed]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH1, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetXaxis(*args): return rootc.TH1_GetXaxis(*args)
    def GetYaxis(*args): return rootc.TH1_GetYaxis(*args)
    def GetZaxis(*args): return rootc.TH1_GetZaxis(*args)
    def GetBinContent(*args): return rootc.TH1_GetBinContent(*args)
    def GetBinError(*args): return rootc.TH1_GetBinError(*args)
    def GetEntries(*args): return rootc.TH1_GetEntries(*args)
    def SetBinContent(*args): return rootc.TH1_SetBinContent(*args)
    def SetBinError(*args): return rootc.TH1_SetBinError(*args)
    def SetEntries(*args): return rootc.TH1_SetEntries(*args)
TH1_swigregister = rootc.TH1_swigregister
TH1_swigregister(TH1)

class TH1F(TH1):
    __swig_setmethods__ = {}
    for _s in [TH1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH1F, name, value)
    __swig_getmethods__ = {}
    for _s in [TH1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH1F, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH1F(*args)
        try: self.this.append(this)
        except: self.this = this
TH1F_swigregister = rootc.TH1F_swigregister
TH1F_swigregister(TH1F)

class TH1D(TH1):
    __swig_setmethods__ = {}
    for _s in [TH1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH1D, name, value)
    __swig_getmethods__ = {}
    for _s in [TH1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH1D(*args)
        try: self.this.append(this)
        except: self.this = this
TH1D_swigregister = rootc.TH1D_swigregister
TH1D_swigregister(TH1D)

class TH1C(TH1):
    __swig_setmethods__ = {}
    for _s in [TH1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH1C, name, value)
    __swig_getmethods__ = {}
    for _s in [TH1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH1C, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH1C(*args)
        try: self.this.append(this)
        except: self.this = this
TH1C_swigregister = rootc.TH1C_swigregister
TH1C_swigregister(TH1C)

class TH1S(TH1):
    __swig_setmethods__ = {}
    for _s in [TH1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH1S, name, value)
    __swig_getmethods__ = {}
    for _s in [TH1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH1S, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH1S(*args)
        try: self.this.append(this)
        except: self.this = this
TH1S_swigregister = rootc.TH1S_swigregister
TH1S_swigregister(TH1S)

class TH2(TH1):
    __swig_setmethods__ = {}
    for _s in [TH1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH2, name, value)
    __swig_getmethods__ = {}
    for _s in [TH1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH2, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetBinContent(*args): return rootc.TH2_GetBinContent(*args)
    def GetBinError(*args): return rootc.TH2_GetBinError(*args)
    def SetBinContent(*args): return rootc.TH2_SetBinContent(*args)
    def SetBinError(*args): return rootc.TH2_SetBinError(*args)
TH2_swigregister = rootc.TH2_swigregister
TH2_swigregister(TH2)

class TH2C(TH2):
    __swig_setmethods__ = {}
    for _s in [TH2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH2C, name, value)
    __swig_getmethods__ = {}
    for _s in [TH2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH2C, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH2C(*args)
        try: self.this.append(this)
        except: self.this = this
TH2C_swigregister = rootc.TH2C_swigregister
TH2C_swigregister(TH2C)

class TH2D(TH2):
    __swig_setmethods__ = {}
    for _s in [TH2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH2D, name, value)
    __swig_getmethods__ = {}
    for _s in [TH2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH2D(*args)
        try: self.this.append(this)
        except: self.this = this
TH2D_swigregister = rootc.TH2D_swigregister
TH2D_swigregister(TH2D)

class TH2F(TH2):
    __swig_setmethods__ = {}
    for _s in [TH2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH2F, name, value)
    __swig_getmethods__ = {}
    for _s in [TH2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH2F, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH2F(*args)
        try: self.this.append(this)
        except: self.this = this
TH2F_swigregister = rootc.TH2F_swigregister
TH2F_swigregister(TH2F)

class TH2S(TH2):
    __swig_setmethods__ = {}
    for _s in [TH2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH2S, name, value)
    __swig_getmethods__ = {}
    for _s in [TH2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH2S, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = rootc.new_TH2S(*args)
        try: self.this.append(this)
        except: self.this = this
TH2S_swigregister = rootc.TH2S_swigregister
TH2S_swigregister(TH2S)

class TH3(TH1):
    __swig_setmethods__ = {}
    for _s in [TH1]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TH3, name, value)
    __swig_getmethods__ = {}
    for _s in [TH1]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TH3, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
TH3_swigregister = rootc.TH3_swigregister
TH3_swigregister(TH3)

class TAxis(TObject):
    __swig_setmethods__ = {}
    for _s in [TObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TAxis, name, value)
    __swig_getmethods__ = {}
    for _s in [TObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TAxis, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetNbins(*args): return rootc.TAxis_GetNbins(*args)
    def GetXmin(*args): return rootc.TAxis_GetXmin(*args)
    def GetXmax(*args): return rootc.TAxis_GetXmax(*args)
TAxis_swigregister = rootc.TAxis_swigregister
TAxis_swigregister(TAxis)



